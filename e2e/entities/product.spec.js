const Utils = require('../utils')

describe('Product Screen Tests', () => {
  before(async () => {
    await device.reloadReactNative()
    await Utils.loginAsUser()
  })
  after(async () => {
    await Utils.goBack()
    await Utils.goBack()
    await Utils.logout()
  })

  beforeEach(async () => {
    await device.reloadReactNative()
    await navigateToProductScreen()
  })

  const navigateToProductScreen = async () => {
    await expect(element(by.id('launchScreen'))).toBeVisible()
    await element(by.id('menuButton')).tap()
    await element(by.id('entitiesDrawerButton')).tap()
    await Utils.scrollTo('productEntityScreenButton', 'entityScreenScrollList')
    await element(by.id('productEntityScreenButton')).tap()
  }

  it('should allow you to create an entity', async () => {
    await expect(element(by.id('productScreen'))).toBeVisible()
    await expect(element(by.text('Create'))).toBeVisible()
    // create
    await element(by.id('productCreateButton')).tap()
    await Utils.scrollTo('productNameInput', 'productEditScrollView')
    await element(by.id('productNameInput')).replaceText('sample-data')
    await Utils.scrollTo('productDescriptionInput', 'productEditScrollView')
    await element(by.id('productDescriptionInput')).replaceText('sample-data')
    await Utils.scrollTo('priceInput', 'productEditScrollView')
    await element(by.id('priceInput')).replaceText('123')
    await Utils.scrollTo('quantityInput', 'productEditScrollView')
    await element(by.id('quantityInput')).replaceText('123')
    await Utils.scrollTo('productImageFullInput', 'productEditScrollView')
    await element(by.id('productImageFullInput')).replaceText('sample-data')
    await Utils.scrollTo('productImageFullUrlInput', 'productEditScrollView')
    await element(by.id('productImageFullUrlInput')).replaceText('sample-data')
    await Utils.scrollTo('productImageThumbInput', 'productEditScrollView')
    await element(by.id('productImageThumbInput')).replaceText('sample-data')
    await Utils.scrollTo('productImageThumbUrlInput', 'productEditScrollView')
    await element(by.id('productImageThumbUrlInput')).replaceText('sample-data')
    await Utils.scrollTo('barcodeInput', 'productEditScrollView')
    await element(by.id('barcodeInput')).replaceText('sample-data')
    await Utils.scrollTo('serialCodeInput', 'productEditScrollView')
    await element(by.id('serialCodeInput')).replaceText('sample-data')
    await Utils.scrollTo('priorityPositionInput', 'productEditScrollView')
    await element(by.id('priorityPositionInput')).replaceText('123')
    await element(by.id('submitButton')).tap()
    await element(by.text('View')).tap()
    await Utils.scrollTo('productName', 'productDetailScrollView')
    await expect(element(by.id('productName'))).toHaveText('ProductName: sample-data')
    await Utils.scrollTo('productDescription', 'productDetailScrollView')
    await expect(element(by.id('productDescription'))).toHaveText('ProductDescription: sample-data')
    await Utils.scrollTo('price', 'productDetailScrollView')
    await expect(element(by.id('price'))).toHaveText('Price: 123')
    await Utils.scrollTo('quantity', 'productDetailScrollView')
    await expect(element(by.id('quantity'))).toHaveText('Quantity: 123')
    await Utils.scrollTo('productImageFull', 'productDetailScrollView')
    await expect(element(by.id('productImageFull'))).toHaveText('ProductImageFull: sample-data')
    await Utils.scrollTo('productImageFullUrl', 'productDetailScrollView')
    await expect(element(by.id('productImageFullUrl'))).toHaveText('ProductImageFullUrl: sample-data')
    await Utils.scrollTo('productImageThumb', 'productDetailScrollView')
    await expect(element(by.id('productImageThumb'))).toHaveText('ProductImageThumb: sample-data')
    await Utils.scrollTo('productImageThumbUrl', 'productDetailScrollView')
    await expect(element(by.id('productImageThumbUrl'))).toHaveText('ProductImageThumbUrl: sample-data')
    await Utils.scrollTo('barcode', 'productDetailScrollView')
    await expect(element(by.id('barcode'))).toHaveText('Barcode: sample-data')
    await Utils.scrollTo('serialCode', 'productDetailScrollView')
    await expect(element(by.id('serialCode'))).toHaveText('SerialCode: sample-data')
    await Utils.scrollTo('priorityPosition', 'productDetailScrollView')
    await expect(element(by.id('priorityPosition'))).toHaveText('PriorityPosition: 123')
    // update
    await element(by.text('EDIT')).tap()
    await Utils.scrollTo('productNameInput', 'productEditScrollView')
    await element(by.id('productNameInput')).replaceText('sample-data-2')
    await Utils.scrollTo('productDescriptionInput', 'productEditScrollView')
    await element(by.id('productDescriptionInput')).replaceText('sample-data-2')
    await Utils.scrollTo('priceInput', 'productEditScrollView')
    await element(by.id('priceInput')).replaceText('1234')
    await Utils.scrollTo('quantityInput', 'productEditScrollView')
    await element(by.id('quantityInput')).replaceText('1234')
    await Utils.scrollTo('productImageFullInput', 'productEditScrollView')
    await element(by.id('productImageFullInput')).replaceText('sample-data-2')
    await Utils.scrollTo('productImageFullUrlInput', 'productEditScrollView')
    await element(by.id('productImageFullUrlInput')).replaceText('sample-data-2')
    await Utils.scrollTo('productImageThumbInput', 'productEditScrollView')
    await element(by.id('productImageThumbInput')).replaceText('sample-data-2')
    await Utils.scrollTo('productImageThumbUrlInput', 'productEditScrollView')
    await element(by.id('productImageThumbUrlInput')).replaceText('sample-data-2')
    await Utils.scrollTo('barcodeInput', 'productEditScrollView')
    await element(by.id('barcodeInput')).replaceText('sample-data-2')
    await Utils.scrollTo('serialCodeInput', 'productEditScrollView')
    await element(by.id('serialCodeInput')).replaceText('sample-data-2')
    await Utils.scrollTo('priorityPositionInput', 'productEditScrollView')
    await element(by.id('priorityPositionInput')).replaceText('1234')
    await element(by.id('submitButton')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('productName'))).toHaveText('ProductName: sample-data-2')
    await expect(element(by.id('productDescription'))).toHaveText('ProductDescription: sample-data-2')
    await expect(element(by.id('price'))).toHaveText('Price: 1234')
    await expect(element(by.id('quantity'))).toHaveText('Quantity: 1234')
    await expect(element(by.id('productImageFull'))).toHaveText('ProductImageFull: sample-data-2')
    await expect(element(by.id('productImageFullUrl'))).toHaveText('ProductImageFullUrl: sample-data-2')
    await expect(element(by.id('productImageThumb'))).toHaveText('ProductImageThumb: sample-data-2')
    await expect(element(by.id('productImageThumbUrl'))).toHaveText('ProductImageThumbUrl: sample-data-2')
    await expect(element(by.id('barcode'))).toHaveText('Barcode: sample-data-2')
    await expect(element(by.id('serialCode'))).toHaveText('SerialCode: sample-data-2')
    await expect(element(by.id('priorityPosition'))).toHaveText('PriorityPosition: 1234')
    // delete
    await element(by.text('DELETE')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('productScreen'))).toBeVisible()
  })
})
